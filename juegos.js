/*JUEGO PIEDRA PAPEL Y TIJERA EN JAVASCRIPT


let piedra = "piedra";
let papel = "papel";
let tijera = "tijera";

function jugadaAleatoria() {
    let opciones = [piedra, papel, tijera];
    let numeroAleatorio = Math.floor(Math.random() * opciones.length);
    return opciones[numeroAleatorio];
}

function determinarGanador(jugador, computadora) {
    if (jugador === computadora) {
        return "empate";
    } else if (
        (jugador === piedra && computadora === tijera) ||
        (jugador === papel && computadora === piedra) ||
        (jugador === tijera && computadora === papel)
    ) {
        return "¬°Ganaste el juego! üéâ";
    } else {
        return "Perdiste perdiste el juegoüò¢";
    }
}

function jugar() {
    let jugador = prompt("Elige: piedra, papel o tijera").toLowerCase();

    if (![piedra, papel, tijera].includes(jugador)) {
        alert("Opci√≥n no v√°lida. Intenta de nuevo.");
        return jugar(); // Vuelve a ejecutar la funci√≥n si la entrada no es v√°lida
    }

    let computadora = jugadaAleatoria();
    alert(`T√∫ elegiste: ${jugador}`);
    alert(`La computadora eligi√≥: ${computadora}`);

    let resultado = determinarGanador(jugador, computadora);

    if (resultado === "empate") {
        alert("¬°Empate! Vamos a jugar de nuevo.");
        return jugar(); // Si hay empate, se repite el juego.
    }

    alert(resultado);
}

jugar();*/

//FUNCIONES

/*Las funciones son uno de los bloques de construcci√≥n fundamentales en JavaScript.
 Una funci√≥n en JavaScript es similar a un procedimiento ‚Äî un conjunto de instrucciones
que realiza una tarea o calcula un valor, pero para que un procedimiento califique como funci√≥n,
debe tomar alguna entrada y devolver una salida donde hay alguna relaci√≥n obvia entre la entrada y la salida.
Para usar una funci√≥n, debes definirla en alg√∫n lugar del √°mbito desde el que deseas llamarla.

Definir funciones
Declaraci√≥n de funci√≥n
Una definici√≥n de funci√≥n (tambi√©n denominada declaraci√≥n de funci√≥n o expresi√≥n de funci√≥n ) consta de la palabra clave function, seguida de:

El nombre de la funci√≥n.
Una lista de par√°metros de la funci√≥n, entre par√©ntesis y separados por comas.
Las declaraciones de JavaScript que definen la funci√≥n, encerradas entre llaves, { ... }.
Por ejemplo, el siguiente c√≥digo define una funci√≥n simple llamada square("cuadrado"):

square "cuadrado"
function square(number) {      
  return number * number;
}


PARAMETROS : 

En JavaScript, los par√°metros de una funci√≥n son valores que se le pasan a la funci√≥n cuando se invoca. Estos par√°metros se definen 
entre par√©ntesis en la declaraci√≥n de la funci√≥n y se utilizan dentro del cuerpo de la funci√≥n para realizar operaciones o c√°lculos.
 JavaScript es flexible con los par√°metros; puedes definir un n√∫mero espec√≠fico de par√°metros y luego pasar menos o m√°s argumentos al llamar a la funci√≥n. 
 Los par√°metros restantes se tratan como undefined. Tambi√©n es posible usar par√°metros por defecto y el operador rest (...) para mayor flexibilidad y versatilidad.
 como se muestra en el siguiente ejemplo:

 HOSTING
El hoisting es un t√©rmino que se usa para describir c√≥mo JavaScript parece que mueve las declaraciones funciones al principio del c√≥digo, de forma que las puedes usar incluso antes de declararlas. Por ejemplo:

sum(1, 2) // 3

function sum(a, b) {
  return a + b
}

// Definimos la funci√≥n `miFuncion` que recibe un objeto como argumento  
// Funci√≥n para cambiar la propiedad 'make' del objeto  
function myFunc(theObject) {  
    theObject.make = 'Toyota'; // Cambia el valor de la propiedad 'make'  
  }  
  
  // Crea un objeto con propiedades  
  var mycar = { make: 'Honda', model: 'Accord', year: 1998 };  
  
  // Muestra el valor actual de 'make'  
  alert('Valor inicial de make: ' + mycar.make); // Muestra "Honda"  
  
  // Solicita al usuario que escriba un nuevo valor para 'make'  
  var nuevoMake = prompt('Escribe un nuevo valor para make:');  
  
  // Cambia la propiedad 'make' del objeto seg√∫n la entrada del usuario  
  if (nuevoMake) { // Solo cambia si el usuario proporcion√≥ un valor  
    mycar.make = nuevoMake;  
  }  
  
  // Muestra el nuevo valor de 'make'  
  alert('Nuevo valor de make: ' + mycar.make); // Muestra el nuevo valor  

//Function Expression 

En JavaScript, una expresi√≥n de funci√≥n es una forma de definir una funci√≥n como parte 
de una expresi√≥n. A diferencia de las declaraciones de funci√≥n, las expresiones de funci√≥n 
no necesitan tener un nombre (funciones an√≥nimas) y pueden ser asignadas a variables, pasadas
 como argumentos a otras funciones o usadas en otras expresiones. Esto proporciona flexibilidad 
 en la forma en que se define y se utiliza la funcionalidad dentro del c√≥digo.
 Son especialmente √∫tiles para funciones de orden superior y closures.


  EJEMPLO:

const resta = function restaDos(a, b) {  
    return a - b;  
};  

const resultadoResta = resta(10, 4);  
console.log(resultadoResta); // Salida: 6 


FUNCIONES FLECHAS

Las funciones flecha en JavaScript son una forma de definir funciones de manera concisa. 
Son √∫tiles para acciones simples, especialmente las de una sola l√≠nea. 

Caracteristicas : 

-Permiten definir funciones an√≥nimas de forma m√°s simple, clara y concisa.
-Son ideales para simplificar el c√≥digo.
-Mantienen el contexto de "this" de forma predecible.
-Permiten reducir el c√≥digo, incluso utilizando par√°metros.

Sintaxis

*Hay dos variantes: sin llaves y con llaves. 
*Si la funci√≥n tiene solamente una sentencia que devuelve un valor, se pueden eliminar las llaves y la palabra return. 
*Se pueden omitir los par√©ntesis si solo hay un argumento. 
*El s√≠mbolo => se utiliza para definir la funci√≥n, mientras que su cuerpo se encierra entre llaves. 

EJEMPLO: 

const saludar = () => { console.log('Hola'); }
const multiplicar1 = (param) => { const resultado = param * 2; console.log(resultado) }
const multiplicar = (x, y) => { const resultado = x * y; console.log(resultado); }

RECURSIVIDAD 

Es el acto de una funci√≥n llam√°ndose a s√≠ misma. La recursi√≥n es utilizada para resolver 
problemas que contienen subproblemas m√°s peque√±os. Una funci√≥n recursiva puede recibir 2 entradas: 
un caso base (finaliza la recursi√≥n) o un un caso recursivo (contin√∫a la recursi√≥n).

-Sirve
*La recursividad se usa en diversas aplicaciones, tales como:
*Estructuras de datos (√°rboles, listas enlazadas).
*Algoritmos matem√°ticos (factorial, Fibonacci).
*B√∫squeda y recorrido de estructuras complejas.
*Implementaci√≥n de algoritmos de backtracking (como el problema de las torres de Hanoi).

CARACTERISTICAS : 

-Caso base: Es la condici√≥n que detiene la recursi√≥n.
-Caso recursivo: Es la llamada a la funci√≥n con un problema reducido.
-Pila de llamadas (Stack): Cada llamada recursiva se almacena en la pila hasta que se resuelven todas.
-Puede generar desbordamiento de pila (Stack Overflow) si no se maneja bien la condici√≥n de salida.

INTERFAZ

JavaScript no tiene una interfaz espec√≠fica para la recursividad,
 pero se pueden usar funciones con par√°metros para gestionar estados en cada llamada. 
 Adem√°s, se pueden utilizar estructuras como Array.prototype.reduce() y Array.prototype.map() 
 para aplicar recursividad funcional.

 EJEMPLO

 function factorial(n) {
    // Caso base: cuando n es 0 o 1, el factorial es 1
    if (n === 0 || n === 1) {
        return 1;
    }
    // Caso recursivo: n * factorial(n - 1)
    return n * factorial(n - 1);
}

// Probamos la funci√≥n
console.log(factorial(5)); // Salida: 120


ARREGLOS

Los arreglos (arrays) en JavaScript son estructuras de datos que permiten 
almacenar una colecci√≥n ordenada de elementos. 
Cada elemento tiene un √≠ndice num√©rico, comenzando desde 0.

SIRVEN PARA : 

Los arreglos se usan para almacenar y manipular conjuntos de datos de manera eficiente. Algunas de sus aplicaciones incluyen:
Almacenar listas de valores (n√∫meros, cadenas, objetos, etc.).
 Recorrer datos de forma din√°mica con bucles (for, forEach, map, etc.).
 Ordenar y filtrar informaci√≥n.
 Implementar estructuras de datos como pilas (stack) y colas (queue).

CARACTERISTICAS 

*Indexados: Los elementos se acceden mediante √≠ndices num√©ricos, comenzando desde 0.
*Din√°micos: Pueden cambiar de tama√±o autom√°ticamente al agregar o eliminar elementos.
*Heterog√©neos: Pueden contener diferentes tipos de datos en un mismo array.
*Basados en objetos: Aunque se comportan como listas, en realidad son objetos (typeof [] ‚Üí 'object').
*M√©todos nativos: Incluyen m√©todos para manipular datos (push(), pop(), map(), filter(), etc.).

INTERFAZ 

Los arreglos en JavaScript est√°n basados en la interfaz Array.prototype, que proporciona m√©todos y propiedades para su manipulaci√≥n. Algunos m√©todos clave incluyen:

‚úî Mutables (modifican el array original):

push(elemento): Agrega un elemento al final.
pop(): Elimina el √∫ltimo elemento.
shift(): Elimina el primer elemento.
unshift(elemento): Agrega un elemento al inicio.
splice(indice, cantidad): Elimina o reemplaza elementos.
sort():	Ordena el array (modifica el original)	arr.sort((a, b) => a - b);
reverse():	Invierte el orden del array	arr.reverse();

‚úî Inmutables (devuelven un nuevo array sin modificar el original):

map(callback): Aplica una funci√≥n a cada elemento y devuelve un nuevo array.
filter(callback): Filtra los elementos seg√∫n una condici√≥n.
reduce(callback, valorInicial): Reduce el array a un solo valor.
concat():	Une dos o m√°s arrays sin modificar los originales	arr.concat(otroArr);
slice():	Extrae una parte del array en un nuevo array	arr.slice(1, 3);

‚úî B√∫squeda:

indexOf(valor): Devuelve la posici√≥n del valor o -1 si no existe.
find(callback): Devuelve el primer elemento que cumple una condici√≥n.
includes(valor): Verifica si un valor est√° en el array (true o false).
lastIndexOf():	Devuelve la √∫ltima posici√≥n de un elemento	arr.lastIndexOf(3);
findIndex():	Retorna el √≠ndice del primer elemento que cumple una condici√≥n	arr.findIndex(x => x > 5);
some():	Devuelve true si al menos un elemento cumple una condici√≥n	arr.some(x => x > 5);
every():	Devuelve true si todos los elementos cumplen una condici√≥n	arr.every(x => x > 5);


EJEMPLO:

Tienda de productos
Supongamos que tenemos un array de objetos con productos de una tienda. Queremos:
‚úÖ Filtrar los productos que cuestan m√°s de $20.
‚úÖ Transformar los nombres a may√∫sculas.
‚úÖ Calcular el precio total de los productos filtrados.

javascript
// Lista de productos con nombre y precio
const productos = [
    { nombre: "Camiseta", precio: 25 },
    { nombre: "Pantal√≥n", precio: 40 },
    { nombre: "Gorra", precio: 15 },
    { nombre: "Zapatos", precio: 60 }
];

// 1Ô∏è‚É£ Filtrar productos con precio mayor a 20
const productosFiltrados = productos.filter(producto => producto.precio > 20);
console.log("Productos filtrados:", productosFiltrados);

Salida:
[
    { nombre: "Camiseta", precio: 25 },
    { nombre: "Pantal√≥n", precio: 40 },
    { nombre: "Zapatos", precio: 60 }
]


// 2Ô∏è‚É£ Transformar el nombre de los productos a may√∫sculas
const nombresMayusculas = productosFiltrados.map(producto => producto.nombre.toUpperCase());
console.log("Nombres en may√∫sculas:", nombresMayusculas); 
// Salida: ["CAMISETA", "PANTAL√ìN", "ZAPATOS"]

// 3Ô∏è‚É£ Calcular el precio total de los productos filtrados
const precioTotal = productosFiltrados.reduce((total, producto) => total + producto.precio, 0);
console.log("Precio total de productos filtrados:", precioTotal); 
// Salida: 125




//PROGRAMACI√ìN ORIENTADO A OBJETOS.

Los objetos en JavaScript son una colecci√≥n de propiedades y m√©todos que definen un elemento a trav√©s de una clave y un valor.
 Por ejemplo, si pensamos en una persona, podemos definir sus propiedades como su nombre, su edad, su altura, su peso, etc.
Y sus m√©todos como caminar, correr, saltar, etc.

  SIRVE PARA: 

  *Modularidad: Divide el c√≥digo en objetos reutilizables.
  *Encapsulaci√≥n: Protege los datos dentro de los objetos.
  *Herencia: Permite que los objetos hereden propiedades y m√©todos de otros objetos.
  *Polimorfismo: Facilita la modificaci√≥n de m√©todos en objetos derivados.
  *Reutilizaci√≥n: Facilita la reutilizaci√≥n del c√≥digo en diferentes partes de la aplicaci√≥n.


 CARACTERISTICAS:


  -Clases: Son plantillas para crear objetos.
  -Objetos: Instancias de una clase con sus propios datos y m√©todos.
  -Encapsulaci√≥n: Propiedades y m√©todos privados o p√∫blicos.
  -Herencia: Permite que una clase herede de otra.
  -Polimorfismo: M√©todos con el mismo nombre pueden comportarse diferente en distintas clases.
  -Prototipos: JavaScript usa prototipos en lugar de clases tradicionales.


  INTERFAZ 

  JavaScript no tiene un sistema de interfaces como en Java o C#, pero se pueden simular usando clases abstractas o estructuras de objetos que act√∫an como contratos.
  
  Ejemplo de una "interfaz" en JavaScript:
  
  
  class Figura {
    constructor() {
      if (this.constructor === Figura) {
        throw new Error("No se puede instanciar una clase abstracta.");
      }
    }
    
    calcularArea() {
      throw new Error("El m√©todo calcularArea() debe ser implementado.");
    }
  }
  Cualquier clase que herede de Figura debe implementar el m√©todo calcularArea().


EJEMPLO:

// Definimos una clase base (superclase)
class Figura {
  constructor(color) {
    this.color = color;
  }

  describir() {
    return `Esta es una figura de color ${this.color}.`;
  }
}

// Clase derivada (hereda de Figura)
class Circulo extends Figura {
  constructor(color, radio) {
    super(color);
    this.radio = radio;
  }

  calcularArea() {
    return Math.PI * this.radio ** 2;
  }

  describir() {
    return `Soy un c√≠rculo de color ${this.color} y mi √°rea es ${this.calcularArea().toFixed(2)}.`;
  }
}

// Crear instancia de la clase Circulo
const miCirculo = new Circulo("rojo", 10);

console.log(miCirculo.describir()); // "Soy un c√≠rculo de color rojo y mi √°rea es 314.16."



MANEJO DE EVENTO Y EL DOM (Document Object Model).

El DOM (Document Object Model) es una representaci√≥n estructurada del documento HTML 
que permite a JavaScript acceder y manipular los elementos de una p√°gina web.
El manejo de eventos en JavaScript permite capturar y responder a acciones del usuario, 
como clics, teclas presionadas o desplazamientos.


PARA QUE SIRVE : 

*Interactividad: Permite que la p√°gina web reaccione a acciones del usuario.
*Dinamismo: Modifica contenido, estilos y comportamientos de los elementos en tiempo real.
*Automatizaci√≥n: Ejecuta funciones en respuesta a eventos sin intervenci√≥n manual.
*Validaciones: Verifica la entrada de datos en formularios.

CARACTERISTICAS:

*Captura y propagaci√≥n: Eventos pueden capturarse en distintas fases del DOM.
*Delegaci√≥n de eventos: Permite asignar un evento a un elemento padre y que sus hijos lo hereden.
*Remoci√≥n de eventos: Se pueden agregar y eliminar eventos din√°micamente.
*Eventos predeterminados: Algunos eventos como submit en formularios tienen comportamientos por defecto que se pueden prevenir.
*Eventos personalizados: Se pueden crear eventos propios con CustomEvent.

INTERFAZ

La interfaz Event es la base de todos los eventos en JavaScript. Algunas de sus propiedades y m√©todos m√°s importantes son:

üìå Propiedades principales de Event


*type:	Devuelve el tipo de evento (ej. "click", "keydown", etc.).
*target:	Elemento que dispar√≥ el evento.
*currentTarget:	Elemento al que est√° asociado el evento (puede ser diferente de target).
*timeStamp:	Momento en que ocurri√≥ el evento.
*bubbles:	Indica si el evento burbujea en el DOM (true o false).
*cancelable:	Indica si el evento se puede cancelar con preventDefault().
*defaultPrevented:	Devuelve true si se ha llamado a preventDefault().

üìå M√©todos principales de Event


-preventDefault(): Cancela la acci√≥n predeterminada del evento (ej. evitar env√≠o de formulario).
-stopPropagation(): 	Detiene la propagaci√≥n del evento en el DOM.
-stopImmediatePropagation()	Detiene la propagaci√≥n y evita que otros event listeners en el mismo elemento se ejecuten.
-composedPath(): 	Devuelve un array con la ruta de propagaci√≥n del evento en el DOM.

EJEMPLO:


        // Seleccionar el bot√≥n del DOM
        const boton = document.getElementById("miBoton");

        // Agregar un evento de clic al bot√≥n
        boton.addEventListener("click", function() {
            // Cambiar el color de fondo del bot√≥n
            boton.style.backgroundColor = boton.style.backgroundColor === "blue" ? "red" : "blue";
            boton.textContent = "¬°Me cambiaste de color!";
        });
   


        //MODULOS 

Los m√≥dulos en JavaScript son archivos de c√≥digo independientes que permiten organizar y 
reutilizar c√≥digo de manera m√°s eficiente. Estos m√≥dulos pueden exportar e importar funciones,
 objetos o clases entre diferentes archivos, evitando la contaminaci√≥n del espacio global y 
 mejorando la mantenibilidad del c√≥digo.

 SIRVE PARA : 

*Permiten dividir el c√≥digo en archivos m√°s peque√±os y organizados.
*Facilitan la reutilizaci√≥n del c√≥digo en diferentes partes de la aplicaci√≥n.
*Evitan la contaminaci√≥n del espacio global, ya que cada m√≥dulo tiene su propio √°mbito.
*Mejoran la legibilidad y mantenibilidad del c√≥digo.
*Hacen posible la carga diferida (lazy loading), lo que puede mejorar el rendimiento de la aplicaci√≥n.

CARACTERISTICAS : 

-Uso de import y export: permiten la importaci√≥n y exportaci√≥n de funciones, variables o clases.
-Cada m√≥dulo tiene su propio √°mbito: evita la sobrescritura de variables en el √°mbito global.
-Compatibilidad con ES6+: los m√≥dulos fueron introducidos en ECMAScript 2015 (ES6).
-Deben ser ejecutados en entornos que los soporten: por ejemplo, navegadores modernos o Node.js.
-Se deben incluir con el atributo type="module" al usarlos en HTML.

INTERFAZ

Los m√≥dulos utilizan las siguientes interfaces principales:

export: permite exportar funciones, variables u objetos desde un m√≥dulo.
import: permite importar elementos de otros m√≥dulos.

EJEMPLO : 

Archivo operaciones.js (M√≥dulo que exporta funciones)

// Definimos dos funciones y las exportamos
export function sumar(a, b) {
    return a + b;
}

export function restar(a, b) {
    return a - b;
}
Archivo app.js (M√≥dulo que importa y usa las funciones)


// Importamos las funciones desde el m√≥dulo 'operaciones.js'
import { sumar, restar } from './operaciones.js';

console.log(sumar(5, 3));  // Salida: 8
console.log(restar(10, 4)); // Salida: 6
Archivo index.html (Ejecuci√≥n en el navegador)


PROGRAMACION ASINCRONA 

La programaci√≥n as√≠ncrona en JavaScript permite ejecutar tareas sin bloquear 
el flujo principal del programa. Esto significa que el c√≥digo puede continuar ejecut√°ndose
mientras espera una respuesta de una operaci√≥n, como una solicitud a una API o la lectura de un archivo.

PARA QUE SIRVE :

*Permite ejecutar tareas de larga duraci√≥n sin detener la ejecuci√≥n del c√≥digo.
*Mejora la experiencia del usuario al evitar bloqueos en la interfaz.
*Es esencial para manejar operaciones como llamadas a bases de datos, solicitudes HTTP, lectura/escritura de archivos y temporizadores.
*Facilita la ejecuci√≥n de m√∫ltiples tareas en paralelo.

CARACTERISTICAS : 

-No bloqueante: El c√≥digo sigue ejecut√°ndose mientras espera el resultado de una operaci√≥n as√≠ncrona.
-Uso de promesas y async/await: Para manejar tareas as√≠ncronas de forma m√°s sencilla y legible.
-Eventos y Callbacks: JavaScript usa eventos y funciones de callback para manejar acciones as√≠ncronas.
-Ejecuci√≥n en el Event Loop: La programaci√≥n as√≠ncrona se basa en el Event Loop, que gestiona las tareas pendientes en segundo plano.
-Optimiza el rendimiento: Reduce los tiempos de espera y mejora la eficiencia en el manejo de m√∫ltiples operaciones.

INTERFAZ 

JavaScript ofrece varias herramientas para manejar la programaci√≥n as√≠ncrona:

-Callbacks: Funciones que se ejecutan despu√©s de que una tarea se complete.
-Promises (Promise): Objetos que representan el resultado eventual de una operaci√≥n as√≠ncrona.
-async/await: Sintaxis moderna que simplifica el uso de promesas y hace que el c√≥digo sea m√°s f√°cil de leer.
-setTimeout y setInterval: M√©todos para ejecutar c√≥digo despu√©s de un tiempo determinado.
-fetch API: Para realizar solicitudes HTTP as√≠ncronas.


EJEMPLO

// Funci√≥n as√≠ncrona para obtener datos de una API
async function obtenerUsuarios() {
    try {
        const respuesta = await fetch('https://jsonplaceholder.typicode.com/users');
        const usuarios = await respuesta.json();
        console.log("Lista de usuarios:", usuarios);
    } catch (error) {
        console.error("Error al obtener los usuarios:", error);
    }
}

// Llamar a la funci√≥n
obtenerUsuarios();



*/
